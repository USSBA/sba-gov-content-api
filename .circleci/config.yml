# Environment Variables required to be set in circleci web config
#
# LOWER_AWS_KEY=
# LOWER_AWS_SECRET=
# UPPER_AWS_KEY=
# UPPER_AWS_SECRET=

version: 2
workflows:
  version: 2
  test-build-deploy:
    jobs:
    - cache-dependencies:
        filters:
          branches:
            only: 
            - /.*/
          tags:
            only: 
            - /.*/
    - poirot:
        filters:
          branches:
            only:
            - /.*/
          tags:
            only:
            - /.*/
    - npm-test:
        requires: [cache-dependencies]
        filters:
          branches:
            only: 
            - /.*/
          tags:
            only: 
            - /.*/
    - test-lint:
        requires: [cache-dependencies]
        filters:
          branches:
            only:
            - /.*/
          tags:
            only:
            - /.*/
    - build-package:
        requires: [npm-test, poirot, test-lint]
        filters:
          branches:
            only:
            - master
          tags:
            only:
            - production
            - staging
            - mint
            - qa
            - demo
            - /int-\w+/
    - upload-package:
        requires: [build-package]
        filters:
          branches:
            ignore:
            - /.*/
          tags:
            only:
            - /int-\w+/
        context: sba-gov-lower
    - deploy-package:
        requires: [upload-package]
        filters:
          branches:
            ignore:
            - /.*/
          tags:
            only:
            - /int-\w+/
        context: sba-gov-lower
    - deploy-package-serverless:
        requires: [build-package]
        filters:
          branches:
            only:
            - master
          tags:
            only:
            - qa
            - demo
            - mint
        context: sba-gov-lower
    - hold:
        type: approval
        requires: [build-package]
        filters:
          branches:
            ignore:
            - /.*/
          tags:
            only:
            - production
            - staging
        context: sba-gov-upper
    - deploy-package-serverless-with-approval:
        requires: [hold]
        filters:
          branches:
            ignore:
            - /.*/
          tags:
            only:
            - staging
            - production
        context: sba-gov-upper
jobs:
  cache-dependencies:
    docker:
      - image: circleci/node:12.13
    steps:
      - checkout
      - restore_cache:
          keys:
          - v2-dependencies-{{ checksum "package.json" }}
      - run:
          name: install dependencies
          command: |
            npm install --silent --no-save
      - save_cache:
          paths:
            - ./node_modules
          key: v2-dependencies-{{ checksum "package.json" }}
  npm-test:
    docker:
    - image: circleci/node:12.13
    steps:
      - checkout
      - restore_cache:
          keys:
          - v2-dependencies-{{ checksum "package.json" }}
      - run:
          name: run mocha
          command: |
            npm test
  test-lint:
    docker:
    - image: circleci/node:12.13
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v2-dependencies-{{ checksum "package.json" }}
      - run:
          name: run lint
          command: |
            npm run lint-no-fix
  poirot:
    docker:
    - image: circleci/python:latest
    steps:
    - checkout
    - run:
       name: Run poirot tests
       command: |
         sudo pip install poirot
         poirot --patterns='https://raw.githubusercontent.com/DCgov/poirot/master/poirot/patterns/default.txt'
         poirot --patterns='https://raw.githubusercontent.com/DCgov/poirot-patterns/master/financial.txt'
  build-package:
    docker:
      - image: circleci/node:12.13
    steps:
      - checkout
      - restore_cache:
          keys:
          - v2-dependencies-{{ checksum "package.json" }}
      - run:
          name: create zip package
          command: |
            mkdir build
            mkdir workspace
            cp package.json build/
            cp -R src/* build/
            cd build
            find . -name '*.test.js' -delete
            find . -name '*.integration-test.js' -delete
            npm i --prod --silent
            rm package.json
            zip -r -q ../workspace/sba-gov-content-api.zip .
            cd ..
            rm -rf build
      - persist_to_workspace:
          root: workspace
          paths:
            - sba-gov-content-api.zip
  upload-package:
    docker:
      - image: ussba/cc-docker-git-aws:latest
    steps:
      - checkout
      - attach_workspace:
          at: workspace
      - run:
          name: publish
          shell: /bin/bash -eo pipefail
          command: |

            export ENVIRONMENT=${CIRCLE_TAG}

            export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-us-east-1}
            export AWS_DEFAULT_OUTPUT=${AWS_DEFAULT_OUTPUT:-json}

            aws s3api put-object --body "workspace/sba-gov-content-api.zip" --bucket "${BUCKET_NAME}" --key "${ENVIRONMENT}/sba-gov-content-api.zip"
  
  deploy-package:
    docker:
      - image: ussba/cc-docker-git-aws:latest
    steps:
      - checkout
      - run:
          name: deploy
          shell: /bin/bash -eo pipefail
          command: |
            
            export ENVIRONMENT=${CIRCLE_TAG}
            
            export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-us-east-1}
            export AWS_DEFAULT_OUTPUT=${AWS_DEFAULT_OUTPUT:-json}

            export VERSION_ID=$(aws s3api list-object-versions --bucket ${BUCKET_NAME} --prefix "${ENVIRONMENT}/sba-gov-content-api.zip" | jq '.Versions[0].VersionId')
            export LAMBDA_NAME="${ENVIRONMENT}-ContentLambda"

            aws lambda update-function-code --function-name "${LAMBDA_NAME}" --s3-bucket "${BUCKET_NAME}" --s3-key "${ENVIRONMENT}/sba-gov-content-api.zip" --s3-object-version "${VERSION_ID}"

  deploy-package-serverless:
    docker:
      - image: cimg/node:12.18
    steps:
    - checkout
    - attach_workspace:
        at: workspace
    - run:
          name: deploy
          shell: /bin/bash -eo pipefail
          command: |
            if [ -z "${CIRCLE_BRANCH}" ]	       
              then	
                TARGET_ENVIRONMENT=${CIRCLE_TAG}	
              else	
                TARGET_ENVIRONMENT=${CIRCLE_BRANCH}	
              fi	

              case $TARGET_ENVIRONMENT in	
                master)	
                  export ENVIRONMENT=mint	
                  ;;
                *)	
                  export ENVIRONMENT=${CIRCLE_TAG}	
                  ;;	
              esac

              sudo npm i -g serverless
              serverless deploy --stage ${ENVIRONMENT}

  deploy-package-serverless-with-approval:
    docker:
      - image: cimg/node:12.18
    steps:
    - checkout
    - attach_workspace:
        at: workspace
    - run:
          name: deploy
          shell: /bin/bash -eo pipefail
          command: |

            sudo npm i -g serverless
            serverless deploy --stage ${CIRCLE_TAG}

